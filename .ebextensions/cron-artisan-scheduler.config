# modified from https://github.com/awsdocs/elastic-beanstalk-samples/blob/master/configuration-files/aws-provided/instance-configuration/cron-leaderonly-linux.config


###################################################################################################
#### This configuration file allows a cron job to run only on one Linux instance in the environment.
#### 
#### The script "/usr/local/bin/test_leader_instance.sh" will sort and compare the current instances in the
#### Auto Scaling group and if it matches the first instance in the sorted list it will exit 0.
#### This will mean that this script will only exit 0 for one of the instances in your environment.
####
#### The second script is an example of how you might use the "/usr/local/bin/test_leader_instance.sh" script
#### to execute commands and log a timestamp to "/tmp/cron-artisan-scheduler.log".
####
#### A cron example is setup at "/etc/cron.d/artisan-scheduler" to execute the script 
#### "/usr/local/bin/artisan-scheduler.sh" every minute. A command is also run upon each deployment to 
#### clear any previous versions of "/etc/cron.d/artisan-scheduler" by removing #### "/etc/cron.d/artisan-scheduler.bak".
####
#### Note that for the first script to gather the required information, additional IAM permissions
#### will be needed to be added to a policy attached to the instance profile used by the instances
#### in the environment. The policy shown below will grant the access needed. Note that the default
#### instance profile for Elastic Beanstalk is "aws-elasticbeanstalk-ec2-role".
####
#### How to create a New Policy
####         - https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create.html
####
#### Adding Permissions to the Default Instance Profile
####         - https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-instanceprofile.html#iam-instanceprofile-addperms
####
#### NB: Please note that as the "/usr/local/bin/test_leader_instance.sh" script makes use of the EC2 health
#### status to determine "InService" instances in the Auto Scaling Group, the cron could fail to
#### run if the "leader" instance has failed and Auto Scaling has not yet changed the EC2 instance
#### state.
###################################################################################################
####
#### {
####   "Version": "2012-10-17",
####   "Statement": [
####     {
####       "Sid": "Stmt1409855610000",
####       "Effect": "Allow",
####       "Action": [ "autoscaling:DescribeAutoScalingGroups" ],
####       "Resource": [ "*" ]
####     },
####     {
####       "Sid": "Stmt1409855649000",
####       "Effect": "Allow",
####       "Action": [ "ec2:DescribeTags" ],
####       "Resource": [ "*" ]
####     }
####   ]
#### }
####
###################################################################################################
###################################################################################################

packages: 
  yum:
    jq: [] 

files:
  "/etc/cron.d/artisan-scheduler":
    mode: "000644"
    owner: root
    group: root
    content: |
      * * * * * root cd /var/app/current && php artisan schedule:run >> /dev/null 2>&1

commands:
  rm_old_cron:
    command: "rm -fr /etc/cron.d/artisan-scheduler.bak"
    ignoreErrors: true
